import Head from 'next/head';
import styles from '../styles/Home.module.css';

import Footer from '../components/footer'

import { useState, useEffect } from 'react';

import { gql } from '@apollo/client';
import client from './api/anilist-client';

import type { PaginationProps } from 'antd';
import { Pagination } from 'antd';

/** @jsxImportSource @emotion/react */
import { css } from "@emotion/react"

import AnimeBox from '../components/animeBox'

const GET_ANIMES_QUERY = gql`
  query GetAnimes($id: Int, $page: Int, $perPage: Int, $search: String) {
    Page(page: $page, perPage: $perPage) {
      pageInfo {
        total
        currentPage
        lastPage
        hasNextPage
        perPage
      }
      media(id: $id, search: $search) {
        id
        bannerImage
        title {
          romaji
          english
          native
        }
      }
    }
  }
`;

export default function Home({ animes, pageInfo }) {
  const [currentPage, setCurrentPage] = useState(1);
  const [animeData, setAnimeData] = useState(animes);

  useEffect(() => {
    fetchAnimeData(1);
  }, []);

  useEffect(() => {
    fetchAnimeData(currentPage);
  }, [currentPage]);

  const onChange: PaginationProps['onChange'] = async (pageNumber) => {
    setCurrentPage(pageNumber);
  };

  const fetchAnimeData = async (page) => {
    try {
      const { data } = await client.query({
        query: GET_ANIMES_QUERY,
        variables: {
          page: page,
          perPage: 10,
        },
      });

      setAnimeData(data.Page.media);
    } catch (error) {
      console.error('Error fetching anime data:', error);
      setAnimeData([]);
    }
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>AnimExplore</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>AnimExplore</h1>

        <p className={styles.description}>
          Your one stop anime management solution.
        </p>

        <div className={styles.grid}>
          {animeData.map((anime) => (
            // <Link href={`/animeDetailPage?id=${encodeURIComponent(anime.id)}`} key={anime.id}>
              <AnimeBox anime={anime} />
            // </Link>
          ))}
        </div>
      </main>

      <Pagination
        showQuickJumper
        defaultCurrent={1}
        total={pageInfo.lastPage}
        onChange={onChange}
        css={css`padding: 1em 0;`}
      />
      <Footer />
    </div>
  );
}

export async function getStaticProps() {
  try {
    const { data } = await client.query({
      query: GET_ANIMES_QUERY,
      variables: {
        page: 1,
        perPage: 10,
      },
    });

    return {
      props: {
        animes: data.Page.media,
        pageInfo: data.Page.pageInfo,
      },
    };
  } catch (error) {
    console.error('Error fetching initial anime data:', error);
    return {
      props: {
        animes: [],
        pageInfo: { total: 0, currentPage: 0, lastPage: 0, hasNextPage: false, perPage: 0 },
      },
    };
  }
}